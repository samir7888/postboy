generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ─── AUTH MODELS (Better Auth Compatible) ────────────────────────────────
//

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  sessions      Session[]
  accounts      Account[]
  workspaces    Workspace[]       @relation("UserWorkspaces")
  memberships   WorkspaceMember[]

  workspaceInvites WorkspaceInvite[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

//
// ─── WORKSPACES & MEMBERSHIP ─────────────────────────────────────────────
//

model Workspace {
  id          String      @id @default(cuid())
  name        String
  description String?
  ownerId     String      
  owner       User        @relation("UserWorkspaces", fields: [ownerId], references: [id])

  collections Collection[]
  members     WorkspaceMember[]
  invites     WorkspaceInvite[]
  environments Environment[]

  websocketPresets WebSocketPreset[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@unique([name, ownerId])
}

model WorkspaceInvite {
   id          String     @id @default(cuid())
  workspaceId String
  token       String     @unique
  expiresAt   DateTime?
  createdById String
  
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy   User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt



}

model WebSocketPreset {
  id         String   @id @default(cuid())
  name       String
  url        String
  protocols  Json?    
  params     Json?    
  workspaceId String? 

  workspace  Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)

  websocketMessages WebsocketMessage[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum DIRECTION {
  INCOMING
  OUTGOING
}

model WebsocketMessage {
  id          String   @id @default(cuid())
  presetId    String? 
  connectionId String? 
  direction   DIRECTION @default(INCOMING)
  payload     String?  
  size        Int?
  timestamp   DateTime @default(now())

  preset      WebSocketPreset? @relation(fields: [presetId], references: [id], onDelete: SetNull)
  meta        Json?
}

enum MEMBER_ROLE {
  ADMIN
  EDITOR
  VIEWER
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  role        MEMBER_ROLE @default(ADMIN)

  userId      String
  workspaceId String

  user        User       @relation(fields: [userId], references: [id])
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])


  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt

  @@unique([userId, workspaceId])
}

//
// ─── COLLECTIONS & REQUESTS ──────────────────────────────────────────────
//

model Collection {
  id          String     @id @default(cuid())
  name        String

  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  requests    Request[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt


    
}

enum REST_METHOD {
  GET
  POST
  PUT
  PATCH
  DELETE
}

model Request {
  id          String      @id @default(cuid())
  name        String
  method      REST_METHOD @default(GET)
  url         String
  parameters  Json?
  headers     Json?       // e.g. 
  
  body        Json?       // request body (JSON / text)
  response    Json?       // optional: save last response

  collectionId String
  collection   Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  runs         RequestRun[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model RequestRun {
  id         String   @id @default(cuid())

  requestId  String
  request    Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  status     Int
  statusText String?
  headers    Json?
  body       String?   // raw text or JSON string
  durationMs Int?

  createdAt  DateTime @default(now())
}

//
// ─── ENVIRONMENTS ───────────────────────────────────────────────────────
//

model Environment {
  id          String     @id @default(cuid())
  name        String
  values      Json       // e.g. { "BASE_URL": "https://api.example.com", "AUTH": "Bearer xxx" }

  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}